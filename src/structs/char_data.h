/***************************************************************************
* swmud.pl
* ------------------------------------------------------------------------ *
*                     ____________   __     ______                         *
*   Aldegard    Jot  (   ___   ___| /  \   |  __  )   Thanos      Trog     *
*        ______________\  \|   |  /  ^   \ |     <_______________          *
*        \________________/|___|/___/"\___\|__|\________________/          *
*                  \   \/ \/   //  \   |  __  )(  ___/`                    *
*                    \       //  ^   \ |     <__)  \                       *
*                      \_!_//___/"\___\|__|\______/TM                      *
* (c) 2009                  M       U        D                Ver 1.0      *
* ------------------------------------------------------------------------ *
*                               <module_name>                              *
****************************************************************************/


/* This file was generated by Trog's granulate_structs.pl. */

#ifndef CHAR_DATA_H_
#define CHAR_DATA_H_
#include "../defines.h"
#include "../typedefs.h"

struct char_data
{
	CHAR_DATA			* next;
	CHAR_DATA			* prev;
	CHAR_DATA			* next_in_room;
	CHAR_DATA			* prev_in_room;
	CHAR_DATA			* master;
	CHAR_DATA			* leader;
	CHAR_DATA			* reply;
	CHAR_DATA			* retell;			/* Thanos */
	CHAR_DATA			* switched;
	CHAR_DATA			* mount;
	KNOWN_CHAR_DATA		* first_known;
	KNOWN_CHAR_DATA		* last_known;		// Tanglor
	int					attribute1;		//oba inicjowane -2*MAX_CECH
	int					attribute2;
	int					kins;
	AUCTION_DATA		* first_auction;		//pierwsza aukcja jakiej przewodzisz
	AUCTION_DATA		* last_auction;
	DIALOG_DATA			* first_dialog;
	DIALOG_DATA			* last_dialog;
	HHF_DATA			* hunting;
	HHF_DATA			* fearing;
	HHF_DATA			* hating;
	SUSPECT_DATA		* first_suspect;		/* pamiêæ policjanta */
	SUSPECT_DATA		* last_suspect;		/* Thanos */
	SPEC_FUN			* spec_fun;
	SPEC_FUN			* spec_2;
	FIGHT_DATA			* fighting;
	MPROG_ACT_LIST		* mpact;
	int					mpactnum;
	ROOM_INDEX_DATA		* curr_room;		/* Thanos - dla supermoba */
	OBJ_DATA			* curr_obj;		/* Thanos - dla supermoba */
	int					mpscriptrun;		/* Thanos - latwiej szukaæ proga */
	bool				locked; /*Trog dla tesow...*/
	MOB_INDEX_DATA		* pIndexData;
	DESCRIPTOR_DATA		* desc;
	AFFECT_DATA			* first_affect;
	AFFECT_DATA			* last_affect;
	NOTE_DATA			* pnote;
	OBJ_DATA			* first_carrying;
	OBJ_DATA			* last_carrying;
	ROOM_INDEX_DATA		* in_room;
	ROOM_INDEX_DATA		* was_in_room;
	ROOM_INDEX_DATA		* was_sentinel;
	ROOM_INDEX_DATA		* plr_home;
	PC_DATA				* pcdata;
	RACE_DATA			* race; /* Trog: zmienic na race a tamto wywalic (done) */
	VAR_DATA			* variables; /* Ratm - zmienne do mob_programow */
	DO_FUN				* last_cmd;
	char				* dest_buf;
	char				* dest_buf_2;
	int					tempnum;
	TIMER				* first_timer;
	TIMER				* last_timer;
	KNOWN_LANG			* first_klang; /* Trog & Ratm */
	KNOWN_LANG			* last_klang;
	LANG_DATA			* speaking;
	char				* name;
	char				* long_descr;
	char				* description;
	char				* przypadki[6];
	char				* inflectsFemale[6]; // Pixel: przypadkiF
	char				* s_vip_flags;
	char				* dialog_name;

	int					num_fighting;
	int					substate;
	int					sex;
	int					top_level;
	int					skill_level[MAX_ABILITY];
	int					trust;
	int					played;
	time_t				logon;
	time_t				save_time;
	int					timer;
	int					wait;
	int					hit;
	int					max_hit;
	int					mana;
	int					max_mana;
	int					move;
	int					max_move;
	int					numattacks;
	int					gold;
	long				experience[MAX_ABILITY];
	int64				act;
	int64				affected_by;
	int					carry_weight;
	int					carry_number;
	int64				xflags;
	int64				resistant;
	int64				immune;
	int64				susceptible;
	int64				attacks;
	int64				defenses;
/* Trog: 2 ponizsze pola sa do jezykow, ktore sa zrobione na bitach,
		a tak byc nie moze, wiec te pola po zmianie kodu jezykow trzeba
		wywalic
*/
	int					saving_poison_death;
	int					saving_wand;
	int					saving_para_petri;
	int					saving_breath;
	int					saving_spell_staff;
	int					alignment;
	int					barenumdie;
	int					baresizedie;
	int					mobthac0;
	int					hitroll;
	int					damroll;
	int					hitplus;
	int					damplus;
	int					position;
	int					defposition;
	int					height;
	int					weight;
	int					armor;
	int					wimpy;
	int					deaf;
	int					perm_str;
	int					perm_int;
	int					perm_wis;
	int					perm_dex;
	int					perm_con;
	int					perm_cha;
	int					perm_lck;
	int					perm_frc;
	int					mod_str;
	int					mod_int;
	int					mod_wis;
	int					mod_dex;
	int					mod_con;
	int					mod_cha;
	int					mod_lck;
	int					mod_frc;
	int					mental_state;		/* simplified */
	int					emotional_state;	/* simplified */
	int					retran;
	int					regoto;
	int					mobinvis;	/* Mobinvis level SB */
	int					backup_wait;	/* reinforcements */
	int					backup_mob;	/* reinforcements */
	int					was_stunned;
	char				* mob_clan;    /* for spec_clan_guard.. set by postguard */
	GUARD_DATA			* guard_data;
	int					main_ability;
	int					charset;
	CRIME_DATA			* first_crime;	/* lista przestêpsw	--Thanos*/
	CRIME_DATA			* last_crime;
	OBJ_DATA			* deposit;	/* wska¼nik na depozyt - latwiej siê szuka */
	QUEST_DATA			* inquest;	/* robiony quest(je¶li gracz),
									a je¶li mob-to quest w którym jest*/
};

#endif //CHAR_DATA_H_

